# Generated by Django 3.1 on 2021-10-27 09:33

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import flowspec.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FragmentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fragmenttype', models.CharField(choices=[('dont-fragment', "Don't fragment"), ('first-fragment', 'First fragment'), ('is-fragment', 'Is fragment'), ('last-fragment', 'Last fragment'), ('not-a-fragment', 'Not a fragment')], max_length=20, verbose_name='Fragment Type')),
            ],
        ),
        migrations.CreateModel(
            name='MatchDscp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dscp', models.CharField(max_length=24)),
            ],
            options={
                'db_table': 'match_dscp',
            },
        ),
        migrations.CreateModel(
            name='MatchPort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('port', models.CharField(blank=True, max_length=24, null=True, unique=True)),
            ],
            options={
                'db_table': 'match_port',
            },
        ),
        migrations.CreateModel(
            name='MatchProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('protocol', models.CharField(max_length=24, unique=True)),
            ],
            options={
                'db_table': 'match_protocol',
            },
        ),
        migrations.CreateModel(
            name='WebhookMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('received_at', models.DateTimeField(auto_now_add=True, help_text='When the event was recieved')),
                ('message', models.JSONField(default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Validation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=10)),
                ('created_date', models.DateField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ThenAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('accept', 'Accept'), ('discard', 'Discard'), ('community', 'Community'), ('next-term', 'Next term'), ('routing-instance', 'Routing Instance'), ('rate-limit', 'Rate limit'), ('sample', 'Sample')], max_length=60, verbose_name='Action')),
                ('action_value', models.CharField(blank=True, max_length=255, null=True, verbose_name='Action Value')),
            ],
            options={
                'db_table': 'then_action',
                'ordering': ['action', 'action_value'],
                'unique_together': {('action', 'action_value')},
            },
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SlugField(max_length=128, verbose_name='Name')),
                ('source', models.CharField(help_text='Network address. Use address/CIDR notation', max_length=32, verbose_name='Source Address')),
                ('sourceport', models.CharField(blank=True, max_length=65535, null=True, verbose_name='Source Port')),
                ('destination', models.CharField(help_text='Network address. Use address/CIDR notation', max_length=32, verbose_name='Destination Address')),
                ('destinationport', models.CharField(blank=True, max_length=65535, null=True, verbose_name='Destination Port')),
                ('port', models.CharField(blank=True, max_length=65535, null=True, verbose_name='Port')),
                ('icmpcode', models.CharField(blank=True, max_length=32, null=True, verbose_name='ICMP-Code')),
                ('icmptype', models.CharField(blank=True, max_length=32, null=True, verbose_name='ICMP-Type')),
                ('packetlength', models.CharField(blank=True, max_length=65535, null=True, verbose_name='Packet Length')),
                ('tcpflag', models.CharField(blank=True, max_length=128, null=True, verbose_name='TCP flag')),
                ('filed', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('expires', models.DateField(blank=True, default=flowspec.models.days_offset, null=True, verbose_name='Expires')),
                ('response', models.CharField(blank=True, max_length=512, null=True, verbose_name='Response')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Comments')),
                ('requesters_address', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(blank=True, choices=[('ACTIVE', 'ACTIVE'), ('ERROR', 'ERROR'), ('EXPIRED', 'EXPIRED'), ('PENDING', 'PENDING'), ('OUTOFSYNC', 'OUTOFSYNC'), ('INACTIVE', 'INACTIVE'), ('ADMININACTIVE', 'ADMININACTIVE')], default='PENDING', max_length=20, null=True, verbose_name='Status')),
                ('applier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('dscp', models.ManyToManyField(blank=True, to='flowspec.MatchDscp', verbose_name='DSCP')),
                ('protocol', models.ManyToManyField(blank=True, to='flowspec.MatchProtocol', verbose_name='Protocol')),
                ('then', models.ManyToManyField(to='flowspec.ThenAction', verbose_name='Then')),
            ],
            options={
                'verbose_name': 'Rule',
                'verbose_name_plural': 'Rules',
                'db_table': 'route',
            },
        ),
        migrations.CreateModel(
            name='Graph',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('graph_img', models.ImageField(max_length=200, upload_to='media/')),
                ('route', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flowspec.route')),
            ],
        ),
    ]
